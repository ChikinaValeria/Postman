{
	"info": {
		"_postman_id": "54bede56-8723-451e-a3ef-4670d9375fc1",
		"name": "SHOP",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "25460693"
	},
	"item": [
		{
			"name": "Create new item",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//функция-рандомайзер\r",
							"const randomInteger = (min, max) => {\r",
							"  let rand = min + Math.random() * (max + 1 - min);\r",
							"  return Math.floor(rand);\r",
							"}\r",
							"\r",
							"\r",
							"//функция для рандомного выбора из списка цветов и записи в переменную коллекции\r",
							"const setColor = () => {\r",
							"    const colorList = ['Черный', 'Красный', 'Синий', 'Белый', 'Фиолетовый', 'RED',  'ORANGE', 'BLUE', 'GREEN', 'Коричневый'];\r",
							"    const color = colorList[randomInteger(0, colorList.length-1)]\r",
							"    pm.collectionVariables.set(\"color\", color);\r",
							"}\r",
							"\r",
							"//функция для рандомного заполнения цены и записи в переменную коллекции\r",
							"const setPrice = () => {\r",
							"    const price = randomInteger(0,9999);\r",
							"    pm.collectionVariables.set(\"price\", price);\r",
							"}\r",
							"\r",
							"//вызов функции и заполнение переменных коллекции, которые будут использоваться в теле запроса\r",
							"\r",
							"setColor();\r",
							"setPrice();\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ответ имеет тело и  это JSON\r",
							"pm.test(\"Response  is valid and has a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json; \r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//объявляем JSON схему\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"method\",\r",
							"        \"status\",\r",
							"        \"result\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"method\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The method Schema\",\r",
							"            \"examples\": [\r",
							"                \"/items/create\"\r",
							"            ]\r",
							"        },\r",
							"        \"status\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The status Schema\",\r",
							"            \"examples\": [\r",
							"                \"ok\"\r",
							"            ]\r",
							"        },\r",
							"        \"result\": {\r",
							"            \"type\": \"object\",\r",
							"            \"default\": {},\r",
							"            \"title\": \"The result Schema\",\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"name\",\r",
							"                \"section\",\r",
							"                \"description\",\r",
							"                \"size\",\r",
							"                \"color\",\r",
							"                \"price\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The id Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"81\"\r",
							"                    ]\r",
							"                },\r",
							"                \"name\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The name Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"Soap\"\r",
							"                    ]\r",
							"                },\r",
							"                \"section\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The section Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"Шорты\"\r",
							"                    ]\r",
							"                },\r",
							"                \"description\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The description Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"Отличные шорты на каждый день\"\r",
							"                    ]\r",
							"                },\r",
							"                \"size\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The size Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"42\"\r",
							"                    ]\r",
							"                },\r",
							"                \"color\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The color Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"Синий\"\r",
							"                    ]\r",
							"                },\r",
							"                \"price\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The price Schema\",\r",
							"                    \"examples\": [\r",
							"                        8119\r",
							"                    ]\r",
							"                },\r",
							"                \"params\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The params Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"\"\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"examples\": [{\r",
							"                \"id\": \"81\",\r",
							"                \"name\": \"Soap\",\r",
							"                \"section\": \"Шорты\",\r",
							"                \"description\": \"Отличные шорты на каждый день\",\r",
							"                \"size\": \"42\",\r",
							"                \"color\": \"Синий\",\r",
							"                \"price\": 8119,\r",
							"                \"params\": \"\"\r",
							"            }]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"method\": \"/items/create\",\r",
							"        \"status\": \"ok\",\r",
							"        \"result\": {\r",
							"            \"id\": \"81\",\r",
							"            \"name\": \"Soap\",\r",
							"            \"section\": \"Шорты\",\r",
							"            \"description\": \"Отличные шорты на каждый день\",\r",
							"            \"size\": \"42\",\r",
							"            \"color\": \"Синий\",\r",
							"            \"price\": 8119,\r",
							"            \"params\": \"\"\r",
							"        }\r",
							"    }]\r",
							"}\r",
							"\r",
							"//проверяем ответ на соотвтетсвие JSON схеме с помощью валидатор tv4\r",
							"pm.test(\"JSON schema is valid using tv4\", function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//проверяем ответ на соотвтетсвие JSON схеме с помощью to.have.jsonSchema\r",
							"pm.test(\"JSON schema is valid using to.have/jsonSchema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем ответ на соотвтетсвие JSON схеме с помощью валидатор Ajv\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv ({logger: console}),\r",
							"    schema = {\r",
							"    //\"$schema\": \"https://json-schema.org/draft-07/schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"method\",\r",
							"        \"status\",\r",
							"        \"result\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"method\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The method Schema\",\r",
							"            \"examples\": [\r",
							"                \"/items/create\"\r",
							"            ]\r",
							"        },\r",
							"        \"status\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The status Schema\",\r",
							"            \"examples\": [\r",
							"                \"ok\"\r",
							"            ]\r",
							"        },\r",
							"        \"result\": {\r",
							"            \"type\": \"object\",\r",
							"            \"default\": {},\r",
							"            \"title\": \"The result Schema\",\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"name\",\r",
							"                \"section\",\r",
							"                \"description\",\r",
							"                \"size\",\r",
							"                \"color\",\r",
							"                \"price\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The id Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"81\"\r",
							"                    ]\r",
							"                },\r",
							"                \"name\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The name Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"Soap\"\r",
							"                    ]\r",
							"                },\r",
							"                \"section\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The section Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"Шорты\"\r",
							"                    ]\r",
							"                },\r",
							"                \"description\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The description Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"Отличные шорты на каждый день\"\r",
							"                    ]\r",
							"                },\r",
							"                \"size\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The size Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"42\"\r",
							"                    ]\r",
							"                },\r",
							"                \"color\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The color Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"Синий\"\r",
							"                    ]\r",
							"                },\r",
							"                \"price\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The price Schema\",\r",
							"                    \"examples\": [\r",
							"                        8119\r",
							"                    ]\r",
							"                },\r",
							"                \"params\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"default\": \"\",\r",
							"                    \"title\": \"The params Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"\"\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": true\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"};\r",
							"\r",
							"pm.test('JSON schema is valid using Ajv', function() {\r",
							"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
							"});\r",
							"\r",
							"//вывод ошибок на консоль\r",
							"console.log(ajv.errors);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{$randomProduct}}",
							"type": "text"
						},
						{
							"key": "section",
							"value": "Шорты",
							"type": "text"
						},
						{
							"key": "description",
							"value": "Отличные шорты на каждый день",
							"type": "text"
						},
						{
							"key": "color",
							"value": "{{color}}",
							"type": "text"
						},
						{
							"key": "size",
							"value": "42",
							"type": "text"
						},
						{
							"key": "price",
							"value": "{{price}}",
							"type": "text"
						}
					]
				},
				"url": "{{url}}/api/items/create/"
			},
			"response": []
		},
		{
			"name": "Search Поиск в магазине",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//создание функции - рандомайзера\r",
							"//тру рандом достигается помещением в цикл const создания переменной + отправки sendRequest на создание\r",
							"//товара\r",
							"const randomInteger = (min, max) => {\r",
							"let rand = min + Math.random() * (max + 1 - min);\r",
							"return Math.floor(rand);\r",
							"}\r",
							"\r",
							"//генерация количества товаров и его помещение в переменную окружения в переменную окружения\r",
							"number_of_items = randomInteger(2, 10);\r",
							"pm.environment.set('number', number_of_items);\r",
							"console.log(number_of_items);\r",
							"\r",
							"//установление префикса запроса query и его сохраниение в переменную окружения \r",
							"hardcore_name = 'Vse_poluchilos2_';\r",
							"pm.environment.set('name', hardcore_name);\r",
							"console.log(hardcore_name);\r",
							"\r",
							"//создание массива возможных значений для полей Категория и Размер\r",
							"const sectionList = ['Платья', 'Шорты', 'Верхняя одежда', 'Рубашки', 'Брюки', 'Футболки'];\r",
							"const sizeList = ['50', '40', '42', '44', '60'];\r",
							"\r",
							"//создание массива для ид созданных товаров\r",
							"var id_arr = [];\r",
							"\r",
							"//цикл (количество итерацией = number) по созданию рандомных значений и отправке их в запросе на создание товара\r",
							"for(i = 0; i < pm.environment.get(\"number\"); i++)\r",
							"{\r",
							"    //новые данные в каждой итерации цикла\r",
							"    var nameItem = pm.environment.get('name') + pm.variables.replaceIn(\"{{$randomProductName}}\") + randomInteger(1, 100);\r",
							"    var random_section = sectionList[randomInteger(0, sectionList.length-1)];\r",
							"    var random_size = sizeList[randomInteger(0, sizeList.length-1)];\r",
							"    var random_price = randomInteger(100, 1000);\r",
							"    //запрос на создание нового товара\r",
							"    const CreateItem = {\r",
							"    url: 'http://shop.bugred.ru/api/items/create/',\r",
							"    method: 'POST',\r",
							"    body: {\r",
							"        'mode': 'raw',\r",
							"        'raw': JSON.stringify({\r",
							"    \"name\": nameItem,\r",
							"    \"section\": random_section,\r",
							"    \"description\": 'Описание_товара_' + randomInteger(1, 100),\r",
							"    \"size\":random_size,\r",
							"    \"price\": random_price\r",
							"})\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(CreateItem, function (err, res) {\r",
							"    if(err) {\r",
							"        console.log(response.json());\r",
							"        console.log('An error occured');\r",
							"    }else if (res.json().status == 'error') {\r",
							"        throw new Error('Не удалось создать товар!');\r",
							"    }else {\r",
							"        console.log('Товар создан!');\r",
							"        console.log(res.json().result.id);\r",
							"        id_arr.push(res.json().result.id); //добавляем ид созданного товара в массив\r",
							"        console.log(id_arr);\r",
							"        postman.setEnvironmentVariable(\"id_arr\", id_arr); //отправляем массив ид в переменную окружения\r",
							"        }\r",
							"    \r",
							"    \r",
							"});\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//создание массива для ид созданных товаров из переменной окружения, где он хранится как строка\r",
							"var id_arr = pm.environment.get(\"id_arr\").split(',');\r",
							"\r",
							"\r",
							"pm.test(\"Поиск вернул правильное количество товаров\", function () {\r",
							"    pm.expect(jsonData.result.length).to.eql(pm.environment.get('number'));\r",
							"});\r",
							"\r",
							"//Если результатов больше 10, поле не name а title\r",
							"for(i=0; i < (jsonData.result.length); i++){\r",
							"    pm.test(\"Поиск вернул правильные данные, результат\" + (i + 1), function () {\r",
							"    if (pm.environment.get('number') < 11){\r",
							"        pm.expect(jsonData.result[i].name).to.include(pm.environment.get('name'));\r",
							"    }else  {\r",
							"        pm.expect(jsonData.result[i].title).to.include(pm.environment.get('name'));\r",
							"    }   \r",
							"});\r",
							"};\r",
							"\r",
							"//удаление ранее созданных товаров из базы по ид, сохранненным в массиве ид\r",
							"//чтобы брались разные элементы массива, помещаем создание метода и его вызов внутрь цикла\r",
							"for(i=0; i < id_arr.length; i++){\r",
							"    console.log(id_arr[i]);\r",
							"    const DeleteItem = {\r",
							"    url: 'http://shop.bugred.ru/api/items/delete/',\r",
							"    method: 'POST',\r",
							"    body: {\r",
							"        'mode': 'raw',\r",
							"        'raw': JSON.stringify({\r",
							"    \"id\": id_arr[i]\r",
							"})\r",
							"    }\r",
							"    };\r",
							"    pm.sendRequest(DeleteItem, function (err, res) {\r",
							"        if(err) {\r",
							"            console.log(response.json());\r",
							"            console.log('An error occured');\r",
							"        }else if (res.json().status == 'error') {\r",
							"            throw new Error('Не удалось удалить товар!');\r",
							"        }else {\r",
							"            console.log('Товар удален!');\r",
							"                       \r",
							"        }\r",
							"        });\r",
							"};\r",
							" \r",
							"\r",
							"//Зачищаем переменные\r",
							"pm.environment.unset(\"number\");\r",
							"pm.environment.unset(\"name\");\r",
							"pm.environment.unset(\"id_arr\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"query\": \"{{name}}\"\r\n}"
				},
				"url": "{{url}}/api/items/search/"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "section",
			"value": ""
		},
		{
			"key": "array",
			"value": ""
		},
		{
			"key": "color",
			"value": ""
		},
		{
			"key": "price",
			"value": ""
		}
	]
}